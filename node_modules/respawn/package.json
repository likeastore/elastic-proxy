{
  "name": "respawn",
  "version": "0.4.2",
  "description": "Spawn a process and restart it if it crashes",
  "repository": {
    "type": "git",
    "url": "git://github.com/mafintosh/respawn.git"
  },
  "author": {
    "name": "Mathias Buus",
    "email": "mathiasbuus@gmail.com"
  },
  "dependencies": {
    "xtend": "~2.1.1",
    "ps-tree": "0.0.3"
  },
  "scripts": {
    "test": "tap test/index.js"
  },
  "devDependencies": {
    "tap": "~0.4.6"
  },
  "keywords": [
    "spawn",
    "restart",
    "keep",
    "alive",
    "process",
    "monitor",
    "service",
    "start",
    "stop"
  ],
  "readme": "# respawn\n\nSpawn a process and restart it if it crashes.\n\n\tnpm install respawn\n\n[![Build Status](https://travis-ci.org/mafintosh/respawn.png)](https://travis-ci.org/mafintosh/respawn)\n\n## Usage\n\nIt is easy to use\n\n``` js\nvar respawn = require('respawn');\n\nvar monitor = respawn(['node', 'server.js'], {\n\tenv: {ENV_VAR:'test'}, // set env vars\n\tcwd: '.',              // set cwd\n\tmaxRestarts:10,        // how many restarts are allowed within 60s\n\t                       // or -1 for infinite restarts\n\tsleep:1000,            // time to sleep between restarts,\n\tstdio: [...]           // forward stdio options\n});\n\nmonitor.start(); // spawn and watch\n```\n\nOptionally you can specify the command to to spawn in the option map as `command: [...]`\n\n## API\n\n* `monitor.start()` Starts the monitor\n\n* `monitor.stop(cb)` Stops the monitor (kills the process if its running with SIGTERM)\n\n* `monitor.status` Get the current monitor status. Available values are `running`, `stopping`, `stopped`, `crashed` and `sleeping`\n\n## Events\n\n* `monitor.on('start')` The monitor has started\n\n* `monitor.on('stop')`  The monitor has fully stopped and the process is killed\n\n* `monitor.on('crash')`  The monitor has crashed (too many restarts or spawn error).\n\n* `monitor.on('sleep')` monitor is sleeping\n\n* `monitor.on('spawn', process)` New child process has been spawned\n\n* `monitor.on('exit', code, signal)` child process has exited\n\n* `monitor.on('stdout', data)` child process stdout has emitted data\n\n* `monitor.on('stderr', data)` child process stderr has emitted data\n\n* `monitor.on('warn', err)` child process has emitted an error\n\n## Graceful restart\n\nTo do graceful restart simply have your app stop gracefully when receiving `SIGTERM` and do\n\n``` js\n// graceful restart (do not wait for old process to die)\nmonitor.stop();\nmonitor.start();\n\n// hard restart (wait for old process to die)\nmonitor.stop(function() {\n\tmonitor.start();\n});\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mafintosh/respawn/issues"
  },
  "homepage": "https://github.com/mafintosh/respawn",
  "_id": "respawn@0.4.2",
  "_from": "respawn@"
}
